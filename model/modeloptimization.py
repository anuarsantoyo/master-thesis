# -*- coding: utf-8 -*-
"""modeloptimization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1idrXmeuYsmIRA1BDR9ts8ACkMu_d8hxK
"""
import torch
from torch import distributions
# Transformations

def bij_transform(prime, lower, upper):
  """Recieves a prime value of type tensor in [-inf, inf] and returns value in [lower, upper]"""
  bij = 1 / (1 + torch.exp(-prime / upper))
  scale = upper - lower
  return scale * bij + lower

def bij_transform_inv(transf, lower, upper):
  """Inverse transformation - Recieves a value of type tensor in [lower, upper] and returns value in [-inf, inf]"""
  return -torch.log(((upper - lower) / (transf - lower) - 1) ** upper)

# Loss Functions

def calc_random_walk_loss(epsilon_t, sigma, device, dtype):
  """Takes epsilon_t and sigma as an input and returns the random walk loss."""
  days = len(epsilon_t)
  loc = epsilon_t[:days-1]
  scale = sigma * torch.ones(days - 1, device=device, dtype=dtype)
  mvn = distributions.multivariate_normal.MultivariateNormal(loc, scale_tril=torch.diag(scale))
  ll = mvn.log_prob(epsilon_t[1:days])
  return -ll

def calc_mse(expected, observed):
  diff = expected - observed
  square = diff.square()
  msr = square.mean()
  return msr

def calc_prior_loss(R0, sigma, phi, alpha, device, dtpye):
  """Takes R0, sigma, phi and alpha as an input and calculates the prior loss.
  The prior loss is calculated by using the log-probability."""

  ll = torch.tensor(0.0, device=device, dtype=dtype)

  ll += distributions.normal.Normal(loc=torch.tensor([3.6], device=device, dtype=dtype), scale=torch.tensor([0.8], device=device, dtype=dtype)).log_prob(R0)[0] # neg

  ll += distributions.normal.Normal(loc=torch.tensor([0.05], device=device, dtype=dtype), scale=torch.tensor([0.03], device=device, dtype=dtype)).log_prob(sigma)[0]

  ll += distributions.normal.Normal(loc=torch.tensor([25], device=device, dtype=dtype), scale=torch.tensor([10], device=device, dtype=dtype)).log_prob(phi)[0]

  ll += distributions.normal.Normal(loc=torch.tensor([0.01], device=device, dtype=dtype), scale=torch.tensor([0.01], device=device, dtype=dtype)).log_prob(alpha)[0]

  return -ll